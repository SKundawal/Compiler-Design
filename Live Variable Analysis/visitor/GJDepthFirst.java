//
// Generated by JTB 1.3.2
//

package visitor;
import in.ac.iitmandi.compl.datastructures.CFGNode;
import in.ac.iitmandi.compl.datastructures.NODETYPE;
import in.ac.iitmandi.compl.utils.CommonUtils;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   int _line = -1;
   String _currentExpression = null;
   DotPrintVisitor _VObj = new DotPrintVisitor();
   LiveAnalysis _LiveAnalysis = new LiveAnalysis();
   HashSet<String> _VariableSet = new HashSet<>();
   List<TreeSet<String>> _Results = new ArrayList<>();
   LinkedHashMap<String, CFGNode> _NodeMap = new LinkedHashMap<>();
   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      for(TreeSet<String> _result : _Results){
         StringBuilder _output = new StringBuilder();
         System.out.println("OUTPUT : " + _output.append(_result).toString().replaceAll(" ", "").replace("[", "").replace("]", ""));
      }
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> ( VarDeclaration() )*
    * f15 -> ( Statement() )*
    * f16 -> "}"
    * f17 -> "}"
    */
   boolean isMainClassLive = false;
   public R visit(MainClass n, A argu) {
      isMainClassLive = true;
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      n.f17.accept(this, argu);
      _VariableSet.clear();
      isMainClassLive = false;
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      Vector<Node> _Variables = n.f3.nodes;
      for(Node _variable : _Variables){
         _variable.accept(this, argu);
      }

      Vector<Node> methods = n.f4.nodes;
      for(Node method : methods){
         _VariableSet.add("this");
         method.accept(this, argu);
      }
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);

      Vector<Node> _Variables = n.f5.nodes;
      for(Node _variable : _Variables){
         _variable.accept(this, argu);
      }

      Vector<Node> methods = n.f6.nodes;
      for(Node method : methods){
         _VariableSet.add("this");
         method.accept(this, argu);
      }
      n.f7.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String _variableName = n.f1.f0.tokenImage;
      _VariableSet.add(_variableName);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Identifier()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      CFGNode startNode = CommonUtils.getMethodCFG(n);

      /**
       * Traverse CFG of this method and store it in LinkedHashMap
       */
      if(startNode != null){
         _TraverseAndStoreCFG(startNode, _VObj, new ArrayList<>());
      }

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);

      if(n.f4.present()){
         n.f4.accept(this, argu);
      }

      n.f5.accept(this, argu);
      n.f6.accept(this, argu);

      Vector<Node> _Variables = n.f7.nodes;
      for(Node _variable : _Variables){
         _variable.accept(this, argu);
      }

      Vector<Node> _Statements = n.f8.nodes;
      for(Node _statement : _Statements){
         _line++;
         _currentExpression = (_statement.accept(_VObj).toString() == "" ? _currentExpression : _statement.accept(_VObj).toString());
         _statement.accept(this, argu);
      }
      _line++;
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      _line = -1;
      _VariableSet.clear();
      return null;
   }

   /**
    *
    * @param startNode
    * @param vObj
    * @param traversedNodes
    */
   private void _TraverseAndStoreCFG(CFGNode startNode, DotPrintVisitor vObj,List<CFGNode> traversedNodes) {
      if(traversedNodes.isEmpty() || !traversedNodes.contains(startNode)) {
         traversedNodes.add(startNode);
         _GetSuccessors(startNode, vObj,traversedNodes);
      }
   }

   private void _GetSuccessors(CFGNode startNode, DotPrintVisitor vObj, List<CFGNode> traversedNodes) {
      if(CommonUtils.isNotNull(startNode.getSuccessorNodes())) {
         List<CFGNode> _Successors = startNode.getSuccessorNodes();
         for(CFGNode _successor : _Successors) {
            if(_successor.getType()!=NODETYPE.ENDNODE) {
               Integer _lineNumber = _successor.getLine();
               String _nodeString = _lineNumber + "." +  _successor.getNode().accept(vObj).toString();
               _NodeMap.put(_nodeString, _successor);
            }
            _TraverseAndStoreCFG(_successor,vObj,traversedNodes);
         }
      }
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      Vector<Node> _FormalParameters = n.f1.nodes;
      for(Node _formalParameter : _FormalParameters){
         _formalParameter.accept(this, argu);
      }

      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      String _formalParameterName = n.f1.f0.tokenImage;
      _VariableSet.add(_formalParameterName);

      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | FloatType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "float"
    */
   public R visit(FloatType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | FieldAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    *       | LivenessQueryStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, null);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      if(n.f1.present()){
         Vector<Node> _Statements = n.f1.nodes;
         for(Node _statement : _Statements){
            _line++;
            _currentExpression = (_statement.accept(_VObj).toString().equals("") ? _currentExpression : _statement.accept(_VObj).toString());
            _statement.accept(this, argu);
         }
      }

      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Identifier()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Identifier()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "="
    * f4 -> Identifier()
    * f5 -> ";"
    */
   public R visit(FieldAssignmentStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <SCOMMENT1>
    * f1 -> <LIVENESSQUERY>
    * f2 -> <SCOMMENT2>
    */

   public void _AddCurrentINSETIntoResult(TreeSet<String> _INSET){
      TreeSet<String> _inset = new TreeSet<>();
      for(String _in : _INSET){
         _inset.add(_in);
      }
      _Results.add(_inset);
   }

   public R visit(LivenessQueryStatement n, A argu) {
      _currentExpression = (_line) + "." + _currentExpression;
      if(null != _currentExpression){
         _LiveAnalysis.clearSets();
         if(_NodeMap.containsKey(_currentExpression)){
            CFGNode _CurrentStatement = _NodeMap.get(_currentExpression);
            _ComputeInOutSets(_CurrentStatement, _VObj, new ArrayList<>());
            _AddCurrentINSETIntoResult(_LiveAnalysis.inSet);
         }
      }
      return null;
   }

   public void _ComputeInOutSets(CFGNode _Node, DotPrintVisitor vObj, List<CFGNode> _TraversedNodes){
      if(_TraversedNodes.isEmpty() || !_TraversedNodes.contains(_Node)){
         _TraversedNodes.add(_Node);
         _TraverseAndComputeInOutSets(_Node, vObj, _TraversedNodes);
      }
   }

   /**
    * @param _Node
    * @param vObj
    * @param _TraversedNodes
    */
   public void _TraverseAndComputeInOutSets(CFGNode _Node, DotPrintVisitor vObj, List<CFGNode> _TraversedNodes){
      if(CommonUtils.isNotNull(_Node.getSuccessorNodes())){
         List<CFGNode> _SuccessorNodes = _Node.getSuccessorNodes();
         for(CFGNode _successorNode : _SuccessorNodes){
            if(_successorNode.getType() != NODETYPE.ENDNODE){
               String _nodeString = _successorNode.getNode().accept(vObj).toString();
               if(_successorNode.getType() == NODETYPE.INTERMEDIATENODE){
                  if(_successorNode.getNode() instanceof IfStatement || _successorNode.getNode() instanceof IfthenStatement || _successorNode.getNode() instanceof IfthenElseStatement){
                     String _ifIdentifier = _nodeString.replace("if(", "").replace(")", "").replace(" ", "");
                     for(String _variable : _VariableSet){
                        if(_variable.equals(_ifIdentifier) && !_LiveAnalysis.outSet.contains(_ifIdentifier)){
                           _LiveAnalysis.inSet.add(_ifIdentifier);
                           break;
                        }
                     }
                  } else if(_successorNode.getNode() instanceof WhileStatement){
                     String _whileIdentifier = _nodeString.replace("while(", "").replace(")", "").replace(" ", "");
                     for(String _variable : _VariableSet){
                        if(_variable.equals(_whileIdentifier) && !_LiveAnalysis.outSet.contains(_whileIdentifier)){
                           _LiveAnalysis.inSet.add(_whileIdentifier);
                           break;
                        }
                     }
                  } else if(_successorNode.getNode() instanceof ArrayAssignmentStatement){
                     String[] _splitNodeString = _nodeString.replace(" ", "").replace(";", "").split("=");

                     /**
                      * Eg. arr[i] = j;
                      * useSet = {i, j}
                      * defSet = {arr}
                      *
                      * As per TA @Arjun Harikumar
                      */
                     String[] _splitLHS = _splitNodeString[0].split("\\[");
                     String _arrayName = _splitLHS[0];
                     String _arrayIndex = _splitLHS[1].replace("]", "");
                     String RHS = _splitNodeString[1];
                     for(String _variable : _VariableSet){
                        if(_variable.equals(RHS) && !_LiveAnalysis.outSet.contains(RHS)){
                           _LiveAnalysis.inSet.add(RHS);
                           break;
                        }

                        if(_variable.equals(_arrayIndex) && !_LiveAnalysis.outSet.contains(_arrayIndex)){
                           _LiveAnalysis.inSet.add(_arrayIndex);
                           break;
                        }
                     }
                     _LiveAnalysis.outSet.add(_arrayName);
                  } else if(_successorNode.getNode() instanceof PrintStatement){
                     String _identifier = _nodeString.replace("System.out.println(", "").replace(");", "").replace(" ", "");
                     for(String _variable : _VariableSet){
                        if (_variable.equals(_identifier) && !_LiveAnalysis.outSet.contains(_identifier)) {
                           _LiveAnalysis.inSet.add(_identifier);
                           break;
                        }
                     }
                  } else if(_successorNode.getNode() instanceof AssignmentStatement) {
                     String[] _splitNodeString = _nodeString.replace(";", "").replace(" ", "").split("=", 2);
                     String LHS = _splitNodeString[0];
                     String RHS = _splitNodeString[1];

                     if(isBinop(RHS)){
                        String regex = generateRegex(RHS);
                        String[] splitExpression = RHS.split(regex);
                        String expr1 = splitExpression[0];
                        String expr2 = splitExpression[1];
                        for(String _variable : _VariableSet){
                           if(_variable.equals(expr1) && !_LiveAnalysis.outSet.contains(expr1)){
                              _LiveAnalysis.inSet.add(expr1);
                           }

                           if (_variable.equals(expr2) && !_LiveAnalysis.outSet.contains(expr2)){
                              _LiveAnalysis.inSet.add(expr2);
                           }
                        }
                     } else if(isArrayLookUp(RHS)){
                        /**
                         * f0 -> Identifier()
                         * f1 -> "["
                         * f2 -> Identifier()
                         * f3 -> "]"
                         */
                        String[] splitArrayLookUp = RHS.split("\\[");
                        String arrayName = splitArrayLookUp[0];
                        String arrayIndex = splitArrayLookUp[1].replace("]", "");
                        for(String _variable : _VariableSet){
                           if(_variable.equals(arrayName) && !_LiveAnalysis.outSet.contains(arrayName)){
                              _LiveAnalysis.inSet.add(arrayName);
                           }

                           if(_variable.equals(arrayIndex) && !_LiveAnalysis.outSet.contains(arrayIndex)){
                              _LiveAnalysis.inSet.add(arrayIndex);
                           }
                        }
                     } else if(isArrayLength(RHS)){
                        /**
                         * f0 -> Identifier()
                         * f1 -> "."
                         * f2 -> "length"
                         */
                        RHS = RHS.replace(".length", "");
                        for(String _variable : _VariableSet){
                           if(_variable.equals(RHS) && !_LiveAnalysis.outSet.contains(RHS)){
                              _LiveAnalysis.inSet.add(RHS);
                              break;
                           }
                        }
                     } else if(isMessageSend(RHS)){
                        /**
                         * f0 -> Identifier()
                         * f1 -> "."
                         * f2 -> Identifier()
                         * f3 -> "("
                         * f4 -> ( ArgList() )?
                         * f5 -> ")"
                         */
                        String[] _splitMessageSend = RHS.split("\\.");
                        String _classObject = _splitMessageSend[0];
                        String[] _splitFunctionCall = _splitMessageSend[1].replace(")", "").split("\\(");
                        String _functionName = _splitFunctionCall[0];
                        for(String _variable : _VariableSet){
                           if(_variable.equals(_classObject) && !_LiveAnalysis.outSet.contains(_classObject)){
                              _LiveAnalysis.inSet.add(_classObject);
                              break;
                           }
                        }
                        if(_splitFunctionCall.length == 2){
                           String[] _functionArgs = _splitFunctionCall[1].replace("\r\n", "").split(",");
                           for(String _args : _functionArgs){
                              for(String _variable : _VariableSet){
                                 if(_variable.equals(_args) && !_LiveAnalysis.outSet.contains(_args)){
                                    _LiveAnalysis.inSet.add(_args);
                                    break;
                                 }
                              }
                           }
                        }
                     } else if(isIntegerLiteral(RHS)){
                        /**
                         * f0 -> <INTEGER_LITERAL>
                         */
                         //DO NOTHING
                     } else if(isFloatLiteral(RHS)){
                        /**
                         * f0 -> <FLOAT_LITERAL>
                         */
                        //DO NOTHING
                     } else if(isTrueLiteral(RHS)){
                        /**
                         * f0 -> "true"
                         */
                        //DO NOTHING
                     } else if(isFalseLiteral(RHS)){
                        /**
                         * f0 -> "false"
                         */
                        //DO NOTHING
                     } else if(isIdentifier(RHS)){
                        /**
                         * f0 -> <IDENTIFIER>
                         */
                        for(String _variable : _VariableSet){
                           if(_variable.equals(RHS) && !_LiveAnalysis.outSet.contains(RHS)){
                              _LiveAnalysis.inSet.add(RHS);
                              break;
                           }
                        }
                     } else if(isThis(RHS)){
                        /**
                         * f0 -> "this"
                         */
                        for(String _variable : _VariableSet){
                           if(_variable.equals(RHS) && !_LiveAnalysis.outSet.contains(RHS)){
                              _LiveAnalysis.inSet.add(RHS);
                              break;
                           }
                        }
                     } else if(isArrayAllocation(RHS)){
                        /**
                         * f0 -> "new"
                         * f1 -> "int"
                         * f2 -> "["
                         * f3 -> Identifier()
                         * f4 -> "]"
                         */
                        RHS = RHS.replace("new int[", "").replace("]", "");
                        for(String _variable : _VariableSet){
                           if(_variable.equals(RHS) && !_LiveAnalysis.outSet.contains(RHS)){
                              _LiveAnalysis.inSet.add(RHS);
                              break;
                           }
                        }
                     } else if(isAllocationExpression(RHS)){
                        /**
                         * f0 -> "new"
                         * f1 -> Identifier()
                         * f2 -> "("
                         * f3 -> ")"
                         */
                        RHS = RHS.replace("new ", "").replace("()", "");
                        for(String _variable : _VariableSet){
                           if(_variable.equals(RHS) && !_LiveAnalysis.outSet.contains(RHS)){
                              _LiveAnalysis.inSet.add(RHS);
                              break;
                           }
                        }
                     } else if(isNotExpression(RHS)){
                        /**
                         * f0 -> "!"
                         * f1 -> Identifier()
                         */
                        RHS = RHS.replace("!", "");
                        for(String _variable : _VariableSet){
                           if(_variable.equals(RHS) && !_LiveAnalysis.outSet.contains(RHS)){
                              _LiveAnalysis.inSet.add(RHS);
                              break;
                           }
                        }
                     }
                     _LiveAnalysis.outSet.add(LHS);
                  } else if(_successorNode.getNode() instanceof FieldAssignmentStatement){
                     /**
                      * f0 -> Identifier()
                      * f1 -> "."
                      * f2 -> Identifier()
                      * f3 -> "="
                      * f4 -> Identifier()
                      * f5 -> ";"
                      */
                     String[] _splitFieldAssignment = _nodeString.replace(";", "").replace(" ", "").split("=");
                     String[] _splitLHS = _splitFieldAssignment[0].split("\\.");
                     String _classObject = _splitLHS[0];
                     String _classField = _splitLHS[1];
                     String RHS = _splitFieldAssignment[1];

                     for(String _variable : _VariableSet){
                        if(_variable.equals(_classObject) && !_LiveAnalysis.outSet.contains(_classObject)){
                           _LiveAnalysis.inSet.add(_classObject);
                        }

                        if(_variable.equals(RHS) && !_LiveAnalysis.outSet.contains(RHS)){
                           _LiveAnalysis.inSet.add(RHS);
                        }
                     }
                     _LiveAnalysis.outSet.add(_classField);
                  }
               } else if (_successorNode.getType() == NODETYPE.RETURNNODE){
                  String[] _splitNodeString = _nodeString.replace(";", "").split(" ");
                  String _returnVal = _splitNodeString[0];
                  if(_returnVal != null && !_LiveAnalysis.outSet.contains(_returnVal)){
                     _LiveAnalysis.inSet.add(_returnVal);
                  }
               }
            }
            _ComputeInOutSets(_successorNode, _VObj, _TraversedNodes);
         }
      }
   }

   private String generateRegex(String expression){
      String regex = new String();
      if(expression.contains("+")){
         regex = "\\+";
      } else if(expression.contains("&&")){
         regex = "\\&\\&";
      } else if (expression.contains("||")){
         regex = "\\|\\|";
      } else if (expression.contains("<=")){
         regex = "<=";
      } else if (expression.contains("!=")){
         regex = "!=";
      } else if (expression.contains("-")){
         regex = "\\-";
      } else if (expression.contains("*")){
         regex = "\\*";
      } else if (expression.contains("/")){
         regex = "\\/";
      }
      return regex;
   }

   private boolean isBinop(String expression){
      if(expression.contains("+")){
         return true;
      } else if(expression.contains("&&")){
         return true;
      } else if (expression.contains("||")){
         return true;
      } else if (expression.contains("<=")){
         return true;
      } else if (expression.contains("!=")){
         return true;
      } else if (expression.contains("-")){
         return true;
      } else if (expression.contains("*")){
         return true;
      } else if (expression.contains("/")){
         return true;
      }
      return false;
   }

   private boolean isArrayLookUp(String expression){
      return expression.contains("[") && expression.contains("]");
   }

   private boolean isArrayLength(String expression){
      return expression.contains(".length");
   }

   private boolean isMessageSend(String expression){
      return (expression.contains(".") && expression.contains("(") && expression.contains(")"));
   }

   private boolean isIntegerLiteral(String expression){
      try{
         Integer.parseInt(expression);
         return true;
      } catch(NumberFormatException e){
         return false;
      }
   }

   private boolean isFloatLiteral(String expression){
      try{
         Float.parseFloat(expression);
         return true;
      } catch(NumberFormatException e){
         return false;
      }
   }

   private boolean isTrueLiteral(String expression){
      return expression.contains("true");
   }

   private boolean isFalseLiteral(String expression){
      return expression.contains("false");
   }

   private boolean isIdentifier(String identifier){
      for(String _variable : _VariableSet){
         if(_variable.equals(identifier)){
            return true;
         }
      }
      return false;
   }

   private boolean isThis(String expression){
      return expression.contains("this");
   }

   private boolean isArrayAllocation(String expression){
      return expression.contains("new int");
   }

   private boolean isAllocationExpression(String expression){
      return expression.contains("new");
   }

   private boolean isNotExpression(String expression){
      return expression.contains("!");
   }


   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "&&"
    * f2 -> Identifier()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "||"
    * f2 -> Identifier()
    */
   public R visit(OrExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "<="
    * f2 -> Identifier()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "!="
    * f2 -> Identifier()
    */
   public R visit(neqExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "+"
    * f2 -> Identifier()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "-"
    * f2 -> Identifier()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "*"
    * f2 -> Identifier()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "/"
    * f2 -> Identifier()
    */
   public R visit(DivExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Identifier()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ArgList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( ArgRest() )*
    */
   public R visit(ArgList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(ArgRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | FloatLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <FLOAT_LITERAL>
    */
   public R visit(FloatLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Identifier()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Identifier()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }
}
