//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;
import static visitor.Constants.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJNoArguDepthFirst implements GJNoArguVisitor<StringBuilder> {

   SymbolTable _SymbolTable;
   public GJNoArguDepthFirst(SymbolTable _SymbolTable){
      this._SymbolTable = _SymbolTable;
   }

   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public StringBuilder visit(NodeList n) {
      StringBuilder _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public StringBuilder visit(NodeListOptional n) {
      if ( n.present() ) {
         StringBuilder _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public StringBuilder visit(NodeOptional n) {
      if ( n.present() )
         return n.node.accept(this);
      else
         return null;
   }

   public StringBuilder visit(NodeSequence n) {
      StringBuilder _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public StringBuilder visit(NodeToken n) { return null; }

   //
   // User-generated visitor methods below
   //

   String _CurrentClass = null;
   String _CurrentMethod = null;
   Integer _RegisterLimit = 0;
   Utilities _Utility = new Utilities();
   StringBuilder _OutputCode = new StringBuilder();

   public StringBuilder getOutputCode(){
      return _OutputCode;
   }

   /**
    * f0 -> <REGLIMIT>
    * f1 -> MainClass()
    * f2 -> ( TypeDeclaration() )*
    * f3 -> <EOF>
    */
   public StringBuilder visit(Goal n) {
      StringBuilder _ret=null;
      _RegisterLimit = Integer.parseInt((n.f0.tokenImage).replace(ASTERISK, BLANK).replace(FORWARDSLASH, BLANK));
      _OutputCode.append(n.f0.tokenImage).append(NEWLINE);
      _OutputCode.append("import static a5.Memory.*;").append(NEWLINE);
      _OutputCode.append(n.f1.accept(this));

      /**
       * Type Declaration
       */
      Vector<Node> _TypeDeclaration = n.f2.nodes;
      for(Node _typeDeclaration : _TypeDeclaration){
         _OutputCode.append(_typeDeclaration.accept(this));
      }
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> ( VarDeclaration() )*
    * f15 -> ( Statement() )*
    * f16 -> "}"
    * f17 -> "}"
    */
   public StringBuilder visit(MainClass n) {
      StringBuilder _mainClass = new StringBuilder();
      _mainClass.append(n.f0.tokenImage).append(SPACE);
      _CurrentClass = n.f1.accept(this).toString();
      _mainClass.append(_CurrentClass).append(SPACE).append(OPENBRACE).append(NEWLINE);
      _mainClass.append(n.f3.tokenImage).append(SPACE);
      _mainClass.append(n.f4.tokenImage).append(SPACE);
      _mainClass.append(n.f5.tokenImage).append(SPACE);
      _CurrentMethod = n.f6.tokenImage;
      _mainClass.append(_CurrentMethod).append(OPENPARENTHESES);
      _mainClass.append(n.f8.tokenImage).append(OPENBRACKET).append(CLOSEBRACKET).append(SPACE);
      _mainClass.append(n.f11.accept(this)).append(CLOSEPARENTHESES).append(SPACE).append(OPENBRACE).append(NEWLINE);

      /**
       * Generate Object R... as per _REGISTERLIMIT dynamically
      */
      _mainClass.append(_Utility.generateObjectR(_RegisterLimit));

      /**
       * Generating alloca(_spillCount);
       */
      Integer _spillCount = _SymbolTable.getSpillCount(_CurrentClass, _CurrentMethod);
      _mainClass.append(ALLOCA).append(OPENPARENTHESES).append(_spillCount).append(CLOSEPARENTHESES).append(SEMICOLON).append(NEWLINE);

      /**
       * Traverse Variable Nodes
      */
      Vector<Node> _VariableDeclarations = n.f14.nodes;
      for(Node _variable : _VariableDeclarations){
         _variable.accept(this);
      }

      /**
       * Traversing Statement Nodes
       */
      Vector<Node> _StatementDeclarations = n.f15.nodes;
      for(Node _statement : _StatementDeclarations){
         _mainClass.append(_statement.accept(this));
      }

      _mainClass.append(CLOSEBRACE).append(NEWLINE);
      _mainClass.append(CLOSEBRACE).append(NEWLINE).append(NEWLINE);
      return _mainClass;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public StringBuilder visit(TypeDeclaration n) {
      return n.f0.accept(this);
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public StringBuilder visit(ClassDeclaration n) {
      StringBuilder _classDeclaration = new StringBuilder();
      _classDeclaration.append(n.f0.tokenImage).append(SPACE);
      _CurrentClass = n.f1.accept(this).toString();
      _classDeclaration.append(_CurrentClass).append(SPACE).append(OPENBRACE).append(NEWLINE);

      /**
       * Variable Declaration
       */
      Vector<Node> _VariableDeclarations = n.f3.nodes;
      for(Node _variable : _VariableDeclarations){
         _variable.accept(this);
      }

      /**
       * Method Declaration
       */
      Vector<Node> _MethodDeclarations = n.f4.nodes;
      for(Node _method : _MethodDeclarations){
         _classDeclaration.append(_method.accept(this)).append(NEWLINE);
      }

      _classDeclaration.append(CLOSEBRACE).append(NEWLINE);
      return _classDeclaration;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public StringBuilder visit(ClassExtendsDeclaration n) {
      StringBuilder _extendClassDeclaration = new StringBuilder();
      _extendClassDeclaration.append(n.f0.tokenImage).append(SPACE);
      _CurrentClass = n.f1.accept(this).toString();
      _extendClassDeclaration.append(_CurrentClass).append(SPACE);
      _extendClassDeclaration.append(n.f2.tokenImage).append(SPACE);
      String _parentClassName = n.f3.accept(this).toString();
      _extendClassDeclaration.append(_parentClassName).append(SPACE).append(OPENBRACE).append(NEWLINE);

      /**
       * Variable Declaration
       */
      Vector<Node> _VariableDeclarations = n.f5.nodes;
      for(Node _variable : _VariableDeclarations){
         _variable.accept(this);
      }

      /**
       * Method Declaration
       */
      Vector<Node> _MethodDeclaration = n.f6.nodes;
      for(Node _method : _MethodDeclaration){
         _extendClassDeclaration.append(_method.accept(this)).append(NEWLINE);
      }

      _extendClassDeclaration.append(CLOSEBRACE).append(NEWLINE);
      return _extendClassDeclaration;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public StringBuilder visit(VarDeclaration n) {
      StringBuilder _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Identifier()
    * f11 -> ";"
    * f12 -> "}"
    */
   public StringBuilder visit(MethodDeclaration n) {
      StringBuilder _methodDeclaration = new StringBuilder();
      _methodDeclaration.append(n.f0.tokenImage).append(SPACE);
      String _methodType = n.f1.accept(this).toString();
      _methodDeclaration.append(_methodType).append(SPACE);
      _CurrentMethod = n.f2.accept(this).toString();
      _methodDeclaration.append(_CurrentMethod).append(OPENPARENTHESES);

      /**
       * Formal Parameters Declaration
       */
      if(n.f4.present()){
         _methodDeclaration.append(n.f4.accept(this));
      }

      _methodDeclaration.append(CLOSEPARENTHESES).append(SPACE).append(OPENBRACE).append(NEWLINE);

      /**
       * Generate Object R... as per _REGISTERLIMIT dynamically
       */
      _methodDeclaration.append(_Utility.generateObjectR(_RegisterLimit));

      /**
       * Generating alloca(spillCount);
       */
      Integer _spillCount = _SymbolTable.getSpillCount(_CurrentClass, _CurrentMethod);
      _methodDeclaration.append(ALLOCA).append(OPENPARENTHESES).append(_spillCount).append(CLOSEPARENTHESES).append(SEMICOLON).append(NEWLINE);

      /**
       * Variable Declaration
       */
      Vector<Node> _VariableDeclarations = n.f7.nodes;
      for(Node _variable : _VariableDeclarations){
         _variable.accept(this);
      }

      /**
       * Statement Declaration
       */
      Vector<Node> _StatementDeclarations = n.f8.nodes;
      for(Node _statement : _StatementDeclarations){
         _methodDeclaration.append(_statement.accept(this));
      }

      _methodDeclaration.append(n.f9.tokenImage).append(SPACE);

      /**
       * Finding the mapping between variable and registerindex/memoryindex/args
       */
      String _returnIdentifier = n.f10.accept(this).toString();
      _methodDeclaration.append(_SymbolTable.getRHSVariableMapping(_CurrentClass, _CurrentMethod, _returnIdentifier));
      _methodDeclaration.append(SEMICOLON).append(NEWLINE);
      _methodDeclaration.append(CLOSEBRACE);

      return _methodDeclaration;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public StringBuilder visit(FormalParameterList n) {
      StringBuilder _formalParameter = new StringBuilder();
      _formalParameter.append(n.f0.accept(this));

      /**
       * Traversing Formal Parameters
       */
      Vector<Node> _FormalParameters = n.f1.nodes;
      for(Node _parameter : _FormalParameters){
         _formalParameter.append(COMMA).append(SPACE).append(_parameter.accept(this));
      }

      return _formalParameter;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public StringBuilder visit(FormalParameter n) {
      return new StringBuilder(n.f0.accept(this).append(DOT).append(n.f1.accept(this)));
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public StringBuilder visit(FormalParameterRest n) {
      return n.f1.accept(this);
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | FloatType()
    *       | Identifier()
    */
   public StringBuilder visit(Type n) {
      return n.f0.accept(this);
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public StringBuilder visit(ArrayType n) {
      return new StringBuilder(INTARRAY);
   }

   /**
    * f0 -> "float"
    */
   public StringBuilder visit(FloatType n) {
      return new StringBuilder(FLOAT);
   }

   /**
    * f0 -> "boolean"
    */
   public StringBuilder visit(BooleanType n) {
      return new StringBuilder(BOOLEAN);
   }

   /**
    * f0 -> "int"
    */
   public StringBuilder visit(IntegerType n) {
      return new StringBuilder(INT);
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | FieldAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    *       | LivenessQueryStatement()
    */
   public StringBuilder visit(Statement n) {
      return n.f0.accept(this);
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public StringBuilder visit(Block n) {
      StringBuilder _blockSB = new StringBuilder();
      n.f0.accept(this);

      Vector<Node> _Block = n.f1.nodes;
      for(Node _statement : _Block){
         _blockSB.append(_statement.accept(this));
      }

      n.f2.accept(this);
      return _blockSB;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public StringBuilder visit(AssignmentStatement n) {
      StringBuilder _assignmentStatement = new StringBuilder();
      String LHS = n.f0.accept(this).toString();
      String RHS = n.f2.accept(this).toString();

      /**
       * In case RHS is just an identifier, we need to find the suitable mapping
       */
      if(_SymbolTable.containsVariable(_CurrentClass, _CurrentMethod, RHS)){
         RHS = _Utility.handleIdentifier(RHS, _CurrentClass, _CurrentMethod, _SymbolTable).toString();
      }

      _assignmentStatement.append(_SymbolTable.getLHSVariableMapping(_CurrentClass, _CurrentMethod, LHS, RHS));
      _assignmentStatement.append(SEMICOLON).append(NEWLINE);
      return _assignmentStatement;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Identifier()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Identifier()
    * f6 -> ";"
    */
   public StringBuilder visit(ArrayAssignmentStatement n) {
      StringBuilder _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "="
    * f4 -> Identifier()
    * f5 -> ";"
    */
   public StringBuilder visit(FieldAssignmentStatement n) {
      StringBuilder _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public StringBuilder visit(IfStatement n) {
      return n.f0.accept(this);
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public StringBuilder visit(IfthenStatement n) {
      StringBuilder _ifStatementSB = new StringBuilder();
      _ifStatementSB.append(n.f0.tokenImage).append(OPENPARENTHESES);

      String _identifier = n.f2.accept(this).toString();

      _ifStatementSB.append(_Utility.handleIdentifier(_identifier, _CurrentClass, _CurrentMethod, _SymbolTable));

      _ifStatementSB.append(CLOSEPARENTHESES).append(SPACE);
      _ifStatementSB.append(OPENBRACE).append(NEWLINE);
      _ifStatementSB.append(n.f4.accept(this));
      _ifStatementSB.append(CLOSEBRACE).append(NEWLINE);

      return _ifStatementSB;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public StringBuilder visit(IfthenElseStatement n) {
      StringBuilder _ifElseStatementSB = new StringBuilder();
      _ifElseStatementSB.append(n.f0.tokenImage).append(OPENPARENTHESES);

      String _identifier = n.f2.accept(this).toString();

      _ifElseStatementSB.append(_Utility.handleIdentifier(_identifier, _CurrentClass, _CurrentMethod, _SymbolTable));

      _ifElseStatementSB.append(CLOSEPARENTHESES).append(SPACE);
      _ifElseStatementSB.append(OPENBRACE).append(NEWLINE);
      _ifElseStatementSB.append(n.f4.accept(this));
      _ifElseStatementSB.append(CLOSEBRACE).append(SPACE);

      /**
       * else statement
       */
      _ifElseStatementSB.append(n.f5.tokenImage).append(OPENBRACE).append(NEWLINE);
      _ifElseStatementSB.append(n.f6.accept(this));
      _ifElseStatementSB.append(CLOSEBRACE).append(NEWLINE);

      return _ifElseStatementSB;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public StringBuilder visit(WhileStatement n) {
      StringBuilder _whileStatementSB = new StringBuilder();
      _whileStatementSB.append(n.f0.tokenImage).append(OPENPARENTHESES);

      String _identifier = n.f2.accept(this).toString();

      _whileStatementSB.append(_Utility.handleIdentifier(_identifier, _CurrentClass, _CurrentMethod, _SymbolTable));

      _whileStatementSB.append(CLOSEPARENTHESES).append(SPACE);
      _whileStatementSB.append(OPENBRACE).append(NEWLINE);
      _whileStatementSB.append(n.f4.accept(this));
      _whileStatementSB.append(CLOSEBRACE).append(NEWLINE);

      return _whileStatementSB;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> ";"
    */
   public StringBuilder visit(PrintStatement n) {
      StringBuilder _printStatementSB = new StringBuilder();
      _printStatementSB.append(SYSTEMDOTOUTDOTPRINTLN).append(OPENPARENTHESES);

      String _identifier = n.f2.accept(this).toString();

      _printStatementSB.append(_Utility.handleIdentifier(_identifier, _CurrentClass, _CurrentMethod, _SymbolTable));

      _printStatementSB.append(CLOSEPARENTHESES).append(SEMICOLON).append(NEWLINE);

      return _printStatementSB;
   }

   /**
    * f0 -> <SCOMMENT1>
    * f1 -> <LIVENESSQUERY>
    * f2 -> <SCOMMENT2>
    */
   public StringBuilder visit(LivenessQueryStatement n) {
      StringBuilder _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public StringBuilder visit(Expression n) {
      return n.f0.accept(this);
   }

   /**
    * f0 -> Identifier()
    * f1 -> "&&"
    * f2 -> Identifier()
    */
   public StringBuilder visit(AndExpression n) {
      StringBuilder _andExpressionSB = new StringBuilder();

      String LHS = n.f0.accept(this).toString();
      String _operator = n.f1.tokenImage;
      String RHS = n.f2.accept(this).toString();

      _andExpressionSB.append(_Utility.handleExpression(LHS, _operator, RHS, _CurrentClass, _CurrentMethod, _SymbolTable));

      return _andExpressionSB;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "||"
    * f2 -> Identifier()
    */
   public StringBuilder visit(OrExpression n) {
      StringBuilder _orExpressionSB = new StringBuilder();

      String LHS = n.f0.accept(this).toString();
      String _operator = n.f1.tokenImage;
      String RHS = n.f2.accept(this).toString();

      _orExpressionSB.append(_Utility.handleExpression(LHS, _operator, RHS, _CurrentClass, _CurrentMethod, _SymbolTable));

      return _orExpressionSB;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "<="
    * f2 -> Identifier()
    */
   public StringBuilder visit(CompareExpression n) {
      StringBuilder _compareExpressionSB = new StringBuilder();

      String LHS = n.f0.accept(this).toString();
      String _operator = n.f1.tokenImage;
      String RHS = n.f2.accept(this).toString();

      _compareExpressionSB.append(_Utility.handleExpression(LHS, _operator, RHS, _CurrentClass, _CurrentMethod, _SymbolTable));

      return _compareExpressionSB;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "!="
    * f2 -> Identifier()
    */
   public StringBuilder visit(neqExpression n) {
      StringBuilder _neqExpressionSB = new StringBuilder();

      String LHS = n.f0.accept(this).toString();
      String _operator = n.f1.tokenImage;
      String RHS = n.f2.accept(this).toString();

      _neqExpressionSB.append(_Utility.handleExpression(LHS, _operator, RHS, _CurrentClass, _CurrentMethod, _SymbolTable));

      return _neqExpressionSB;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "+"
    * f2 -> Identifier()
    */
   public StringBuilder visit(PlusExpression n) {
      StringBuilder _plusExpressionSB = new StringBuilder();

      String LHS = n.f0.accept(this).toString();
      String _operator = n.f1.tokenImage;
      String RHS = n.f2.accept(this).toString();

      _plusExpressionSB.append(_Utility.handleExpression(LHS, _operator, RHS, _CurrentClass, _CurrentMethod, _SymbolTable));

      return _plusExpressionSB;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "-"
    * f2 -> Identifier()
    */
   public StringBuilder visit(MinusExpression n) {
      StringBuilder _minusExpressionSB = new StringBuilder();

      String LHS = n.f0.accept(this).toString();
      String _operator = n.f1.tokenImage;
      String RHS = n.f2.accept(this).toString();

      _minusExpressionSB.append(_Utility.handleExpression(LHS, _operator, RHS, _CurrentClass, _CurrentMethod, _SymbolTable));

      return _minusExpressionSB;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "*"
    * f2 -> Identifier()
    */
   public StringBuilder visit(TimesExpression n) {
      StringBuilder _timesExpressionSB = new StringBuilder();

      String LHS = n.f0.accept(this).toString();
      String _operator = n.f1.tokenImage;
      String RHS = n.f2.accept(this).toString();

      _timesExpressionSB.append(_Utility.handleExpression(LHS, _operator, RHS, _CurrentClass, _CurrentMethod, _SymbolTable));

      return _timesExpressionSB;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "/"
    * f2 -> Identifier()
    */
   public StringBuilder visit(DivExpression n) {
      StringBuilder _divisionExpressionSB = new StringBuilder();

      String LHS = n.f0.accept(this).toString();
      String _operator = n.f1.tokenImage;
      String RHS = n.f2.accept(this).toString();

      _divisionExpressionSB.append(_Utility.handleExpression(LHS, _operator, RHS, _CurrentClass, _CurrentMethod, _SymbolTable));

      return _divisionExpressionSB;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Identifier()
    * f3 -> "]"
    */
   public StringBuilder visit(ArrayLookup n) {
      StringBuilder _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> "length"
    */
   public StringBuilder visit(ArrayLength n) {
      StringBuilder _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ArgList() )?
    * f5 -> ")"
    */
   public StringBuilder visit(MessageSend n) {
      StringBuilder _messageSendSB = new StringBuilder();
      String objectName = n.f0.accept(this).toString();
      _messageSendSB.append(_SymbolTable.getRHSVariableMapping(_CurrentClass, _CurrentMethod, objectName));
      _messageSendSB.append(DOT);
      String methodName = n.f2.accept(this).toString();
      _messageSendSB.append(methodName);
      _messageSendSB.append(OPENPARENTHESES);
      if(n.f4.present()){
         _messageSendSB.append(n.f4.accept(this));
      }
      _messageSendSB.append(CLOSEPARENTHESES);
      return _messageSendSB;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( ArgRest() )*
    */
   public StringBuilder visit(ArgList n) {
      StringBuilder _argListSB = new StringBuilder();
      _argListSB.append(_SymbolTable.getRHSVariableMapping(_CurrentClass, _CurrentMethod, n.f0.accept(this).toString()));
      Vector<Node> _ArgRest = n.f1.nodes;
      for(Node _arg : _ArgRest){
         _argListSB.append(COMMA).append(_SymbolTable.getRHSVariableMapping(_CurrentClass, _CurrentMethod, _arg.accept(this).toString()));
      }
      return _argListSB;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public StringBuilder visit(ArgRest n) {
      return n.f1.accept(this);
   }

   /**
    * f0 -> IntegerLiteral()
    *       | FloatLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    */
   public StringBuilder visit(PrimaryExpression n) {
      return n.f0.accept(this);
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public StringBuilder visit(IntegerLiteral n) {
      return new StringBuilder(n.f0.tokenImage);
   }

   /**
    * f0 -> <FLOAT_LITERAL>
    */
   public StringBuilder visit(FloatLiteral n) {
      return new StringBuilder(n.f0.tokenImage);
   }

   /**
    * f0 -> "true"
    */
   public StringBuilder visit(TrueLiteral n) {
      return new StringBuilder(n.f0.tokenImage);
   }

   /**
    * f0 -> "false"
    */
   public StringBuilder visit(FalseLiteral n) {
      return new StringBuilder(n.f0.tokenImage);
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public StringBuilder visit(Identifier n) {
      return new StringBuilder(n.f0.tokenImage);
   }

   /**
    * f0 -> "this"
    */
   public StringBuilder visit(ThisExpression n) {
      return new StringBuilder(THIS);
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Identifier()
    * f4 -> "]"
    */
   public StringBuilder visit(ArrayAllocationExpression n) {
      StringBuilder _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public StringBuilder visit(AllocationExpression n) {
      StringBuilder _allocationExpressionSB = new StringBuilder();
      _allocationExpressionSB.append(n.f0.tokenImage).append(SPACE);
      _allocationExpressionSB.append(n.f1.accept(this)).append(OPENPARENTHESES).append(CLOSEPARENTHESES);
      return _allocationExpressionSB;
   }

   /**
    * f0 -> "!"
    * f1 -> Identifier()
    */
   public StringBuilder visit(NotExpression n) {
      StringBuilder _notExpressionSB = new StringBuilder();
      String _identifier = n.f1.accept(this).toString();
      _notExpressionSB.append(NEGATION).
              append(_Utility.handleIdentifier(_identifier, _CurrentClass, _CurrentMethod, _SymbolTable));
      return _notExpressionSB;
   }

}
